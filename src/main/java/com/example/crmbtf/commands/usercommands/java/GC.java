
package com.example.crmbtf.commands.usercommands.java;

import com.example.crmbtf.commands.Command;
import com.example.crmbtf.model.TelegramUser;
import com.example.crmbtf.telegram.ExecutionContext;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;


@Slf4j
@Component
public class GC implements Command {
    @Override
    public void doCommand(ExecutionContext executionContext) {

        executionContext.replyMessage("Сборщик мусора - это программа, которая работает на виртуальной машине Java и избавляется от объектов, которые больше не используются приложением Java. Это форма автоматического управления памятью.\n" +
                " \n" +
                "Сборщик мусора Garbage Collector выполняет всего две задачи, связанные с поиском мусора и его очисткой. Для обнаружения мусора существует два подхода :\n" +
                "Reference counting – учет ссылок;\n" +
                "Tracing – трассировка.\n" +
                "Суть подхода «Reference counting» связана с тем, что каждый объект имеет счетчик, который хранит информацию о количестве указывающих на него ссылок. При уничтожении ссылки счетчик уменьшается. При нулевом значении счетчика объект можно считать мусором.\n" +
                "Главным недостатком данного подхода является сложность обеспечения точности счетчика и «невозможность» выявлять циклические зависимости. Так, например, два объекта могут ссылаться друг на друга, но ни на один из них нет внешней ссылки. Это сопровождается утечками памяти. В этой связи данный подход не получил распространения.\n" +
                "Главная идея «Tracing» связана с тем, что до «живого» объекта можно добраться из корневых точек (GC Root). Всё, что доступно из «живого» объекта, также является «живым». Если представить все объекты и ссылки между ними как дерево, то необходимо пройти от корневых узлов GC Roots по всем узлам. При этом узлы, до которых нельзя добраться, являются мусором.\n" +
                "Данный подход, обеспечивающий выявление циклических ссылок, используется в виртуальной машине HotSpot VM.\n" +
                " \n" +
                "JVM HotSpot использует алгоритм сборки мусора типа «Generational Garbage Collection», который позволяет применять разные модули для разных этапов сборки мусора. Всего в HotSpot реализовано четыре сборщика мусора :\n" +
                " \n" +
                "Serial Garbage Collection\n" +
                "Parallel Garbage Collection\n" +
                "CMS Garbage Collection\n" +
                "G1 Garbage Collection\n" +
                " \n" +
                "Serial\n" +
                "Первый, примитивный. Прямой как палка. Для сборки мусора полностью останавливает JVM и собирает мусор в один поток.\n" +
                " \n" +
                "Parallel\n" +
                "Попытка сделать сборку быстрой и многопоточной. На многоядерных процессорах это хорошо работает. Но все равно для сборки он требует полного останова JVM. Использовался по умолчанию до Java 9. В новых версиях Java он продолжает совершенствоваться и дополняться новыми опциями, так что для каких-то особых приложений можно не обращаться к новым сборщикам мусора. Справится и улучшенный Parallel GC.\n" +
                " \n" +
                "CMS\n" +
                "Цель — отсрочить полную сборку мусора с остановом JVM путем маленьких и коротких операций по сбору сведений о мусоре, а потом путём быстрых и коротких операций — убрать, что можно. Если достигается определенный процент использованного heap, т.е. CMS-сборщик видит, что не справляется, то JVM останавливается и происходит полная сборка мусора.\n" +
                " \n" +
                "G1\n" +
                "Впервые появился как экспериментальный в JDK6u14, а начиная с JDK7 Update 4 — как официальный. В Java 9 он теперь включен по умолчанию. Мейнстрим на несколько релизов Java вперед. Поколенческий, как и все предыдущие сборщики, но зоны поколений реализованы несколько иначе. Постоянно совершенствуется. В новых версиях Java 11 и Java 12 добавляются новые функции.\n" +
                " \n" +
                "http://java-online.ru/garbage-collection.xhtml \n" +
                "https://algodma.wordpress.com/2019/08/23/%D1%81%D0%B1%D0%BE%D1%80%D1%89%D0%B8%D0%BA%D0%B8-%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0-%D0%B2-java/ про виды сборщиков\n" +
                "https://javarush.ru/groups/posts/917-sborka-musora\n" +
                "https://javarush.ru/groups/posts/1931-ejshje-o-sborjshike-musora-\n");
    }

    @Override
    public boolean shouldRunOnText(String text) {
        return text.equals("Что такое сборщик мусора? (Garbage collector)");
    }

    @Override
    public TelegramUser.botstate getGlobalState() {
        return TelegramUser.botstate.GC;
    }
}